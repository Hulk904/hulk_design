package algorithms.packge01;

/**
 * Created by yangyuan on 2020/2/21.
 *
 * 二维费用的背包问题是指：对于每件物品，具有两种不同的费用；选择这件物品必须同时付出这两种代价；
 * 对于每种代价都有一个可付出的最大值（背包容量）。问怎样选择物品可以得到最大的价值。
 * 设这两种代价分别为代价1和代价2，第i件物品所需的两种代价分别为w[i]和g[i]。
 * 两种代价可付出的最大值（两种背包容量）分别为V和T。物品的价值为v[i]。
 */
public class TwoPack {

    /*
    可以只使用二维的数组：当每件物品只可以取一次时变量j和k采用逆序的循环，当物品有如完全背包问题时采用顺序的循环。当物品有如多重背包问题时拆分物品
    状态转移方程
    for (int i = 1; i <= n; i++)
    for (int j = V; j >= w[i]; j--)
        for (int k = T; k >= g[i]; k--)
            f[j][k] = max(f[j][k], f[j - w[i]][k - g[i]] + v[i]);
     */
}
