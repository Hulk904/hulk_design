package algorithms.other;

/**
 * Created by yangyuan on 2021/6/19.
 * 924. 尽量减少恶意软件的传播
 * 在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。
 一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。
 这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
 假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
 我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
 请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后可能仍然因恶意软件传播而受到感染。
 */
public class MinMalwareSpread {
    //并查集
    int[] p , s, c;
    int find(int x){
        if (p[x] != x){
            p[x] = find(p[x]);
        }
        return p[x];
    }
    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        p = new int[n]; s = new int[n]; c = new int[n];
        for (int i = 0; i < n; i++){
            p[i] = i;
            s[i] = 1;//i所在联通快大小
            c[i] = 0;//联通快内感染点个数
        }
        //将所有联通集合合并
        for (int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                if (graph[i][j] > 0 && find(i) != find(j)){
                    s[find(i)] += s[find(j)];//j合并到i里
                    p[find(j)] = find(i);
                }
            }
        }
        for (int i:initial) c[find(i)]++;
        int rs = -1/*可以拯救的点数*/, rp = Integer.MAX_VALUE;/*节点编号*/
        for (int x:initial){
            if (rs == -1) rp = Math.min(rp, x);//没有选择任何点，可以随便选择一个点(但也要是最小的)
            if (c[find(x)] == 1){
                if (rs < s[find(x)]){//rs 不如当前点好
                    rs = s[find(x)];
                    rp = x;
                } else if (rs == s[find(x)]){
                    rp = Math.min(rp, x);
                }
            }
        }
        return rp;
    }
}
